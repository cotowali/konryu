require 'cotowali'
require 'platform'
require 'os'
require 'http'
require 'tar'

fn prepare_dir(path: string) {
  if os::path::is_file(path) {
    eprintln("Fatal error: Cannot create $path. File exists")
    exit(1)
  }
  if !os::path::exists(path) {
    mkdir(path)
  }
}

var konryu_path = os::path::join(os::path::home(), '.konryu')
prepare_dir(konryu_path)
var konryu_cache = os::path::join(konryu_path, '.cache')
prepare_dir(konryu_cache)

var versions_path = os::path::join(konryu_path, 'versions')
fn version_path(version: string): string {
  return os::path::join(versions_path, version)
}

var current_version_file_path = os::path::join(konryu_path, 'current')

var cotowali_path = os::path::join(konryu_path, 'cotowali')

fn ...string |> json_field(key: string) |> ...string {
  return filter("\"$key\"") |> replace('[", ]', '') |> replace("^$key:", '')
}

fn get_releases() |> ...string {
  return http::get('https://api.github.com/repos/cotowali/cotowali/releases')
    |> json_field('tag_name')
}

fn print_releases() {
  for release in get_releases() {
    println(release)
  }
}

fn specified_too_many_versions() {
  eprintln('Too many arguments. Specify just one version')
  exit(1)
}

fn is_installed_version(target_version: string): bool {
  for version in get_installed_versions() {
    if version == target_version {
      return true
    }
  }
  return false
}

fn current_version(): string {
  if !os::path::is_file(current_version_file_path) {
    return ''
  }
  return cat(current_version_file_path) |> first()
}

fn switch_version(version: string) {
  if os::path::exists(cotowali_path) {
    rm_r(cotowali_path)
  }
  os::symlink(os::path::join(version_path(version), 'cotowali'), cotowali_path)
  version |> current_version_file_path

  println("switched to cotowali $version")
}

fn confirm_with_yes_default(message: string): bool {
  var ans = ''
  while true {
    ans = input_tty("$message [Y/n]: ")
    if ans == 'Y' || ans == 'yes' || ans == '' {
      ans = 'y'
    } else if ans == 'N' {
      ans = 'n'
    }
    if ans == 'y' || ans == 'no' || ans == 'n' {
      break
    }
    eprintln('yes or no')
  }
  return ans == 'y'
}

fn cmd_releases() {
  print_releases()
  exit(0)
}

fn cmd_current() {
  const version = current_version()
  if version != '' {
    println(version)
  } else {
    println('cotowali is not enabled')
  }
  exit(0)
}

fn cmd_install(args: []string) {
  var version = 'latest'
  if args.len() > 1 {
    specified_too_many_versions()
  } else if args.len() > 0 {
    version = args[0]
  }

  var releases = get_releases()
  if version == 'latest' {
    version = releases |> first()
  } else {
    var found = false
    for release in releases {
      if release == version {
        found = true
        break
      }
    }
    if !found {
      eprintln("Cannot install $version: No such version")
      exit(1)
    }
  }
  var dir = version_path(version)
  var url_base = 'https://github.com/cotowali/cotowali/releases/download'
  var filename = cotowali::release::archive_name

  println("Downloading ${filename} ...")
  http::get("${url_base}/${version}/${filename}") |> tar::gz::extract_on(dir)
  println("Successfully installed cotowali ${version} on ${dir}")

  if current_version() == '' {
    switch_version(version) |> null
  } else if current_version() != version {
    if confirm_with_yes_default("Do you want to use $version now?") {
      switch_version(version)
    }
  }

  exit(0)
}

fn cmd_uninstall(args: []string) {
  if args.len() == 0 {
    eprintln('No version is specified')
    exit(1)
  } else if args.len() > 1 {
    specified_too_many_versions()
  }

  const version = args[0]
  if !is_installed_version(version) {
    eprintln("Cannot uninstall $version: No such version")
    exit(1)
  }

  rm_r(version_path(version))
  println("Uninstalled cotowali ${version}")
}

fn get_installed_versions() |> ...string {
  for path in ls(versions_path) {
    yield path
  }
}

fn cmd_versions() {
  for path in get_installed_versions() {
    println(path)
  }
  exit(0)
}

fn cmd_use(args: []string) {
  if args.len() == 0 {
    eprintln('No version is specified')
    exit(1)
  }
  if args.len() > 1 {
    specified_too_many_versions()
  }
  var target_version = args[0]
  var installed_versions = get_installed_versions()
  var latest_version =  installed_versions |> first()
  if latest_version == '' {
    eprintln('cotowali is not installed')
    exit(1)
  }
  if target_version == 'latest' {
    target_version = latest_version
  }
  if !is_installed_version(target_version) {
    eprintln("Cannot use $target_version: No such version")
    exit(1)
  }

  switch_version(target_version)
  exit(0)
}

var has_help_flag = false
var is_error = false
var self = ''
var command = ''
var args = []string{}
for arg in os::args {
  if self == '' {
    self = arg // args[0]
    continue
  }

  if arg == '-h' || arg == '--help' {
    has_help_flag = true
  } else if arg[0] == '-' {
    eprintln("unknown option `$arg`")
    is_error = true
  } else if command == '' {
    command = arg
  } else {
    args += [arg]
  }
}

var command_help = 'help'

if !is_error {
  if command == '' {
    command = 'install'
  } else if command == command_help {
    has_help_flag = true
  } else if command == 'install' {
    cmd_install(args)
  } else if command == 'uninstall' {
    cmd_uninstall(args)
  } else if command == 'use' {
    cmd_use(args)
  } else if command == 'releases' {
    cmd_releases()
  } else if command == 'current' {
    cmd_current()
  } else if command == 'versions' {
    cmd_versions()
  } else {
    eprintln("unknown command `$command`")
    is_error = true
  }
}

if has_help_flag || is_error {
  var msg = 'Konryu - Cotowali installer and version manager

Usage: kornyu [options] [command] [version]

Options:
  -h --help - Print help message

Commands:
  help      - Print help message
  install   - Install cotowali release
  uninstall - uninstall specified version
  use       - use specified version
  releases  - List available cotowali releases
  versions  - List installed cotowali versions
'
  if is_error {
    eprint(msg)
    exit(1)
  } else {
    print(msg)
    exit(0)
  }
}

